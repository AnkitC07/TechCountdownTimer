import { getCartPathFromExtensions } from './extension/utilities.js';
import { setupWebsocketConnection } from './extension/websocket.js';
import { setupBundlerAndFileWatcher } from './extension/bundler.js';
import { setupHTTPServer } from './extension/server.js';
import { ExtensionsPayloadStore, getExtensionsPayloadStoreRawPayload } from './extension/payload/store.js';
import { extensionConfig } from '../../utilities/extensions/configuration.js';
import { runGoExtensionsCLI } from '../../utilities/extensions/cli.js';
import { output, yaml, environment } from '@shopify/cli-kit';
export async function devUIExtensions(options) {
    if (await environment.local.useGoBinary()) {
        await devUIExtensionsWithGo(options);
    }
    else {
        await devUIExtensionsWithNode(options);
    }
}
async function devUIExtensionsWithGo(options) {
    const config = await extensionConfig({ includeResourceURL: true, ...options });
    output.debug(output.content `Dev'ing extension with configuration:
${output.token.json(config)}
`);
    const input = yaml.encode(config);
    await runGoExtensionsCLI(['serve', '-'], {
        cwd: options.app.directory,
        signal: options.signal,
        stdout: options.stdout,
        stderr: options.stderr,
        input,
    });
}
async function devUIExtensionsWithNode(options) {
    const devOptions = {
        ...options,
        checkoutCartUrl: await getCartPathFromExtensions(options.extensions, options.storeFqdn, options.checkoutCartUrl),
    };
    const payloadStoreOptions = {
        ...devOptions,
        websocketURL: getWebSocketUrl(options.url),
    };
    const payloadStoreRawPayload = await getExtensionsPayloadStoreRawPayload(payloadStoreOptions);
    const payloadStore = new ExtensionsPayloadStore(payloadStoreRawPayload, payloadStoreOptions);
    output.debug(`Setting up the UI extensions HTTP server...`);
    const httpServer = setupHTTPServer({ devOptions, payloadStore });
    output.debug(`Setting up the UI extensions Websocket server...`);
    const websocketConnection = setupWebsocketConnection({
        httpServer,
        payloadStore,
    });
    output.debug(`Setting up the UI extensions bundler and file watching...`);
    const fileWatcher = await setupBundlerAndFileWatcher({ devOptions, payloadStore });
    options.signal.addEventListener('abort', () => {
        fileWatcher.close();
        websocketConnection.close();
        httpServer.close();
    });
}
function getWebSocketUrl(url) {
    const websocketURL = new URL('/extensions', url);
    websocketURL.protocol = 'wss:';
    return websocketURL.toString();
}
//# sourceMappingURL=extension.js.map